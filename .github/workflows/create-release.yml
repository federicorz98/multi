name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: 'Release type to increment (major, minor, patch)'
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch
      is_pre_release:
        type: boolean
        description: 'Pre release'
        required: true
        default: false
      is_draft:
        type: boolean
        description: 'Draft'
        required: true
        default: false

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine next version
        id: version
        run: |
          # Fetch tags from the remote
          git fetch --tags

          # Get the latest tag by date; if no tags, start from 1.0.0
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="1.0.0"
          fi
          echo "Latest tag: $latest_tag"

          # Split the latest tag into major, minor, patch
          IFS='.' read -r major minor patch <<<"${latest_tag//[!0-9.]/}"

          # Increment based on the input release_type
          case "${{ github.event.inputs.release_type }}" in
            major) major=$((major + 1)); minor=0; patch=0 ;;
            minor) minor=$((minor + 1)); patch=0 ;;
            patch) patch=$((patch + 1)) ;;
            *) echo "Invalid release_type provided"; exit 1 ;;
          esac

          # Construct the new version tag
          new_version="${major}.${minor}.${patch}"

          # Check for existing tag and increment if necessary
          while git rev-parse "refs/tags/release-$new_version" >/dev/null 2>&1; do
            echo "Tag release-$new_version already exists. Incrementing patch version."
            patch=$((patch + 1))
            new_version="${major}.${minor}.${patch}"
          done

          # Append "-alpha" if is_draft is true
          if [ "${{ github.event.inputs.is_pre_release }}" == "true" ]; then
            new_version="${new_version}-alpha"
          fi

          echo "New version: $new_version"

          # Set the new version as an environment variable
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Update package.json version
        run: |
          # Use jq to update the version field in package.json
          jq '.version = env.new_version' package.json > temp.json && mv temp.json package.json

          # Commit and push the updated package.json
          git add package.json
          git commit -m "Release version to $new_version"
          git push origin main

      - name: Create Tag
        run: |
          git tag -a "$new_version" -m "Release $new_version"
          git push origin "$new_version"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: '$new_version'
          release_name: 'Release $new_version'
          draft: ${{ github.event.inputs.is_draft }}
          prerelease: ${{ github.event.inputs.is_pre_release }}
          body: 'Release for version $new_version'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
